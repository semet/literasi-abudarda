// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
   provider = "prisma-client-js"
   previewFeatures = ["referentialIntegrity"]
}

datasource db {
   provider = "mysql"
   url      = env("DATABASE_URL")
   shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
   referentialIntegrity = "prisma"
}

model About {
   id             String @id @default(uuid())
   body           String @db.Text
   createdAt      DateTime    @default(now())
   updatedAt      DateTime    @updatedAt      
}

model Team {
   id             String @id @default(uuid())
   name           String
   email          String
   phone          String
   position       String
   image          String?
   createdAt      DateTime    @default(now())
   updatedAt      DateTime    @updatedAt      
}

model Video {
   id             String @id @default(uuid())
   caption        String
   url            String
   published      Boolean @default(false)
   createdAt      DateTime    @default(now())
   updatedAt      DateTime    @updatedAt     
}

model Author {
   id                         String @id @default(uuid())
   name                       String
   bio                        String? @db.Text
   image                      String
   createdAt                  DateTime    @default(now())
   updatedAt                  DateTime    @updatedAt  
   fictions                   FictionArticle[]
   nonFictions                NonFictionArticle[]

}


model User {
   id                         String @id @default(uuid())
   name                       String
   email                      String @unique
   password                   String
   phone                      String
   image                      String?
   createdAt                  DateTime    @default(now())
   updatedAt                  DateTime    @updatedAt  
   fictionComments            FictionComment[]
   nonFictionComments         NonFictionComment[]
}

model Category{
   id                         String @id @default(uuid())
   name                       String
   slug                       String
   createdAt                  DateTime    @default(now())
   updatedAt                  DateTime    @updatedAt  
   nonFictionArticles         NonFictionArticle[]
   books                      Book[]
}

model FictionArticle {
   id             String @id @default(uuid())
   title          String
   body           String @db.Text
   like           Int?
   dislike        Int?
   image          String
   author         Author @relation(fields: [authorId], references: [id])
   authorId       String
   createdAt      DateTime    @default(now())
   updatedAt      DateTime    @updatedAt  
   comments       FictionComment[]
}

model NonFictionArticle {
   id             String @id @default(uuid())
   title          String
   body           String @db.Text
   like           Int?
   dislike        Int?
   image          String
   author         Author @relation(fields: [authorId], references: [id])
   authorId       String
   category       Category @relation(fields: [categoryId], references: [id])
   categoryId     String
   createdAt      DateTime    @default(now())
   updatedAt      DateTime    @updatedAt  
   comments       NonFictionComment[]
}

model FictionComment {
   id             String @id @default(uuid())
   article        FictionArticle @relation(fields: [articleId], references: [id])
   articleId      String
   user           User @relation(fields: [userId], references: [id])
   userId         String
   body           String @db.Text
   createdAt      DateTime    @default(now())
   updatedAt      DateTime    @updatedAt  
}

model NonFictionComment {
   id             String @id @default(uuid())
   article        NonFictionArticle @relation(fields: [articleId], references: [id])
   articleId      String
   user           User @relation(fields: [userId], references: [id])
   userId         String
   body           String @db.Text
   createdAt      DateTime    @default(now())
   updatedAt      DateTime    @updatedAt  
}

model Book {
   id             String @id @default(uuid())
   isbn           String
   category       Category @relation(fields: [categoryId], references: [id])
   categoryId     String
   title          String
   image          String
   sinopsis       String @db.Text
   downloads      Int?
   like           Int?
   dislike        Int?
   createdAt      DateTime    @default(now())
   updatedAt      DateTime    @updatedAt  
}

model Admin {
   id                         String @id @default(uuid())
   name                       String
   email                      String @unique
   password                   String
   phone                      String
   image                      String?
   createdAt                  DateTime    @default(now())
   updatedAt                  DateTime    @updatedAt  
   lastLogin                  DateTime?
   loginLocation              String?
}
